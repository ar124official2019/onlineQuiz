//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace onlineQuiz_bsef17m35
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DatabaseEntities : DbContext
    {
        public DatabaseEntities()
            : base("name=DatabaseEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Blacklist> Blacklist { get; set; }
        public virtual DbSet<Country> Country { get; set; }
        public virtual DbSet<EndUser> EndUser { get; set; }
        public virtual DbSet<EndUserType> EndUserType { get; set; }
        public virtual DbSet<Gender> Gender { get; set; }
        public virtual DbSet<Question> Question { get; set; }
        public virtual DbSet<QuestionOption> QuestionOption { get; set; }
        public virtual DbSet<QuestionType> QuestionType { get; set; }
        public virtual DbSet<Quiz> Quiz { get; set; }
        public virtual DbSet<Result> Result { get; set; }
        public virtual DbSet<ResultStatus> ResultStatus { get; set; }
        public virtual DbSet<Student> Student { get; set; }
        public virtual DbSet<Submission> Submission { get; set; }
        public virtual DbSet<Teacher> Teacher { get; set; }
        public virtual DbSet<Visibility> Visibility { get; set; }
        public virtual DbSet<Whitelist> Whitelist { get; set; }
    
        public virtual ObjectResult<getAllQuizzes_Result> getAllQuizzes(Nullable<int> teacherId)
        {
            var teacherIdParameter = teacherId.HasValue ?
                new ObjectParameter("teacherId", teacherId) :
                new ObjectParameter("teacherId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllQuizzes_Result>("getAllQuizzes", teacherIdParameter);
        }
    
        public virtual ObjectResult<getCountries_Result> getCountries()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getCountries_Result>("getCountries");
        }
    
        public virtual ObjectResult<getDeliveredResults_Result> getDeliveredResults(Nullable<int> teacherId, Nullable<int> quizId)
        {
            var teacherIdParameter = teacherId.HasValue ?
                new ObjectParameter("teacherId", teacherId) :
                new ObjectParameter("teacherId", typeof(int));
    
            var quizIdParameter = quizId.HasValue ?
                new ObjectParameter("quizId", quizId) :
                new ObjectParameter("quizId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getDeliveredResults_Result>("getDeliveredResults", teacherIdParameter, quizIdParameter);
        }
    
        public virtual ObjectResult<getLogins_Result> getLogins(string email, string password)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getLogins_Result>("getLogins", emailParameter, passwordParameter);
        }
    
        public virtual ObjectResult<getMySubmissions_Result> getMySubmissions(Nullable<int> studentId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("studentId", studentId) :
                new ObjectParameter("studentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getMySubmissions_Result>("getMySubmissions", studentIdParameter);
        }
    
        public virtual ObjectResult<getOpenQuizzes_Result> getOpenQuizzes(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getOpenQuizzes_Result>("getOpenQuizzes", idParameter);
        }
    
        public virtual ObjectResult<getProfile_Result> getProfile(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getProfile_Result>("getProfile", idParameter);
        }
    
        public virtual ObjectResult<string> getQuestionTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("getQuestionTypes");
        }
    
        public virtual ObjectResult<getResults_Result> getResults(Nullable<int> studentId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("studentId", studentId) :
                new ObjectParameter("studentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getResults_Result>("getResults", studentIdParameter);
        }
    
        public virtual ObjectResult<getSubmission_Result> getSubmission(Nullable<int> teacherId, Nullable<int> quizId, Nullable<int> studentId)
        {
            var teacherIdParameter = teacherId.HasValue ?
                new ObjectParameter("teacherId", teacherId) :
                new ObjectParameter("teacherId", typeof(int));
    
            var quizIdParameter = quizId.HasValue ?
                new ObjectParameter("quizId", quizId) :
                new ObjectParameter("quizId", typeof(int));
    
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("studentId", studentId) :
                new ObjectParameter("studentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getSubmission_Result>("getSubmission", teacherIdParameter, quizIdParameter, studentIdParameter);
        }
    
        public virtual ObjectResult<getSubmissions_Result> getSubmissions(Nullable<int> teacherId, Nullable<int> quizId)
        {
            var teacherIdParameter = teacherId.HasValue ?
                new ObjectParameter("teacherId", teacherId) :
                new ObjectParameter("teacherId", typeof(int));
    
            var quizIdParameter = quizId.HasValue ?
                new ObjectParameter("quizId", quizId) :
                new ObjectParameter("quizId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getSubmissions_Result>("getSubmissions", teacherIdParameter, quizIdParameter);
        }
    
        public virtual ObjectResult<string> getVisibility()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("getVisibility");
        }
    }
}
